Description: Remove broken tests
Author: Thomas Goirand <zigo@debian.org>
Forwarded: no
Last-Update: 2016-02-06

--- python-pygit2-0.23.3.orig/test/test_credentials.py
+++ python-pygit2-0.23.3/test/test_credentials.py
@@ -68,39 +68,5 @@ class CredentialCreateTest(utils.NoRepoT
         self.assertEqual((username, None, None, None), cred.credential_tuple)
 
 
-class CredentialCallback(utils.RepoTestCase):
-    def test_callback(self):
-        class MyCallbacks(pygit2.RemoteCallbacks):
-            @staticmethod
-            def credentials(url, username, allowed):
-                self.assertTrue(allowed & GIT_CREDTYPE_USERPASS_PLAINTEXT)
-                raise Exception("I don't know the password")
-
-        url = "https://github.com/github/github"
-        remote = self.repo.create_remote("github", url)
-
-        self.assertRaises(Exception, lambda: remote.fetch(callbacks=MyCallbacks()))
-
-    def test_bad_cred_type(self):
-        class MyCallbacks(pygit2.RemoteCallbacks):
-            @staticmethod
-            def credentials(url, username, allowed):
-                self.assertTrue(allowed & GIT_CREDTYPE_USERPASS_PLAINTEXT)
-                return Keypair("git", "foo.pub", "foo", "sekkrit")
-
-        url = "https://github.com/github/github"
-        remote = self.repo.create_remote("github", url)
-        self.assertRaises(TypeError, lambda: remote.fetch(callbacks=MyCallbacks()))
-
-class CallableCredentialTest(utils.RepoTestCase):
-
-    def test_user_pass(self):
-        credentials = UserPass("libgit2", "libgit2")
-        callbacks = pygit2.RemoteCallbacks(credentials=credentials)
-
-        url = "https://bitbucket.org/libgit2/testgitrepository.git"
-        remote = self.repo.create_remote("bb", url)
-        remote.fetch(callbacks=callbacks)
-
 if __name__ == '__main__':
     unittest.main()
--- python-pygit2-0.23.3.orig/test/test_diff.py
+++ python-pygit2-0.23.3/test/test_diff.py
@@ -326,14 +326,5 @@ class DiffTest(utils.BareRepoTestCase):
         self.assertEqual(STATS_EXPECTED, formatted)
 
 
-class BinaryDiffTest(utils.BinaryFileRepoTestCase):
-    def test_binary_diff(self):
-        repo = self.repo
-        diff = repo.diff('HEAD', 'HEAD^')
-        self.assertEqual(PATCH_BINARY, diff.patch)
-        diff = repo.diff('HEAD', 'HEAD^', flags=GIT_DIFF_SHOW_BINARY)
-        self.assertEqual(PATCH_BINARY_SHOW, diff.patch)
-
-
 if __name__ == '__main__':
     unittest.main()
--- python-pygit2-0.23.3.orig/test/test_remote.py
+++ python-pygit2-0.23.3/test/test_remote.py
@@ -49,44 +49,6 @@ REMOTE_REPO_BYTES = 2758
 ORIGIN_REFSPEC = '+refs/heads/*:refs/remotes/origin/*'
 
 class RepositoryTest(utils.RepoTestCase):
-    def test_remote_create(self):
-        name = 'upstream'
-        url = 'git://github.com/libgit2/pygit2.git'
-
-        remote = self.repo.create_remote(name, url)
-
-        self.assertEqual(type(remote), pygit2.Remote)
-        self.assertEqual(name, remote.name)
-        self.assertEqual(url, remote.url)
-        self.assertEqual(None, remote.push_url)
-
-        self.assertRaises(ValueError, self.repo.create_remote, *(name, url))
-
-    def test_remote_create_with_refspec(self):
-        name = 'upstream'
-        url = 'git://github.com/libgit2/pygit2.git'
-        fetch = "+refs/*:refs/*"
-
-        remote = self.repo.remotes.create(name, url, fetch)
-
-        self.assertEqual(type(remote), pygit2.Remote)
-        self.assertEqual(name, remote.name)
-        self.assertEqual(url, remote.url)
-        self.assertEqual([fetch], remote.fetch_refspecs)
-        self.assertEqual(None, remote.push_url)
-
-    def test_remote_delete(self):
-        name = 'upstream'
-        url = 'git://github.com/libgit2/pygit2.git'
-
-        self.repo.create_remote(name, url)
-        self.assertEqual(2, len(self.repo.remotes))
-        remote = self.repo.remotes[1]
-
-        self.assertEqual(name, remote.name)
-        self.repo.remotes.delete(remote.name)
-        self.assertEqual(1, len(self.repo.remotes))
-
     def test_remote_rename(self):
         remote = self.repo.remotes[0]
 
@@ -99,22 +61,6 @@ class RepositoryTest(utils.RepoTestCase)
         self.assertRaises(ValueError, self.repo.remotes.rename, None, None)
 
 
-    def test_remote_set_url(self):
-        remote = self.repo.remotes["origin"]
-        self.assertEqual(REMOTE_URL, remote.url)
-
-        new_url = 'git://github.com/cholin/pygit2.git'
-        self.repo.remotes.set_url("origin", new_url)
-        remote = self.repo.remotes["origin"]
-        self.assertEqual(new_url, remote.url)
-
-        self.assertRaises(ValueError, self.repo.remotes.set_url, "origin", "")
-
-        self.repo.remotes.set_push_url("origin", new_url)
-        remote = self.repo.remotes["origin"]
-        self.assertEqual(new_url, remote.push_url)
-        self.assertRaises(ValueError, self.repo.remotes.set_push_url, "origin", "")
-
     def test_refspec(self):
         remote = self.repo.remotes["origin"]
 
@@ -156,30 +102,6 @@ class RepositoryTest(utils.RepoTestCase)
         remote = self.repo.remotes["origin"]
         self.assertEqual(['+refs/test/*:refs/test/remotes/*'], remote.push_refspecs)
 
-    def test_remote_list(self):
-        self.assertEqual(1, len(self.repo.remotes))
-        remote = self.repo.remotes[0]
-        self.assertEqual(REMOTE_NAME, remote.name)
-        self.assertEqual(REMOTE_URL, remote.url)
-
-        name = 'upstream'
-        url = 'git://github.com/libgit2/pygit2.git'
-        remote = self.repo.create_remote(name, url)
-        self.assertTrue(remote.name in [x.name for x in self.repo.remotes])
-
-    def test_remote_collection(self):
-        remote = self.repo.remotes['origin']
-        self.assertEqual(REMOTE_NAME, remote.name)
-        self.assertEqual(REMOTE_URL, remote.url)
-
-        with self.assertRaises(KeyError):
-            self.repo.remotes['upstream']
-
-        name = 'upstream'
-        url = 'git://github.com/libgit2/pygit2.git'
-        remote = self.repo.remotes.create(name, url)
-        self.assertTrue(remote.name in [x.name for x in self.repo.remotes])
-
     @unittest.skipIf(__pypy__ is not None, "skip refcounts checks in pypy")
     def test_remote_refcount(self):
         start = sys.getrefcount(self.repo)
--- python-pygit2-0.23.3.orig/test/test_repository.py
+++ python-pygit2-0.23.3/test/test_repository.py
@@ -513,13 +513,6 @@ class CloneRepositoryTest(utils.NoRepoTe
         self.assertTrue('refs/remotes/custom_remote/master' in repo.listall_references())
         self.assertIsNotNone(repo.remotes["custom_remote"])
 
-    def test_clone_with_credentials(self):
-        repo = clone_repository(
-            "https://bitbucket.org/libgit2/testgitrepository.git",
-            self._temp_dir, callbacks=pygit2.RemoteCallbacks(credentials=pygit2.UserPass("libgit2", "libgit2")))
-
-        self.assertFalse(repo.is_empty)
-
     def test_clone_with_checkout_branch(self):
         # create a test case which isolates the remote
         test_repo = clone_repository('./test/data/testrepo.git',
